#!/bin/sh -e

# Encryption, decryption and verification of messages
# NOTE: the "-e" switch above is important (script failure on error)!

# WARNING: keys are provided as parameters to OpenSSL.
# This script should be rewritten as a C program.

# Variables
cmd="$1"
ssldir="$2"
msgdir="$3"

modp18=${CABLE_CONF}/rfc3526-modp-18.pem
base32=${CABLE_HOME}/hex2base32

sigalg=sha512
encalg=aes256
enchash=sha256


# Command-line parameters
if [ \( "${cmd}" != send  -a  "${cmd}" != peer  -a  "${cmd}" != recv \) \
     -o  ! -d "${ssldir}"  -o  ! -d "${msgdir}" ]; then
    echo "Format: $0 send|peer|recv <ssldir> <msgdir>"
    exit 1
fi


trap '[ $? = 0 ] || error failed' 0
error() {
    logger -t cms -p mail.err "$@ (${msgdir##*/})"
    trap - 0
    exit 1
}


# Verifying the ca/verify/encrypt certificates triple
# * parses and extracts the first certificate from each file
# * verifies the certificates chain
# * generates username from ca.pem and checks it against the given one
verify_certs() {
    local cvedir="$1" name count fingerprint username

    for name in ca verify; do
        openssl x509 -in  "${cvedir}"/${name}.pem \
                     -out "${cvedir}"/${name}.norm.pem
        mv -- "${cvedir}"/${name}.norm.pem "${cvedir}"/${name}.pem

        # Sanity check - OpenSSL should output exactly 1 certificate
        count=`grep -c -- '^-----BEGIN ' "${cvedir}"/${name}.pem`
        [ "${count}" = 1 ]
    done

    # certificates chain verification is also implicitly done later,
    # so not strictly necessary
    openssl verify -x509_strict -policy_check -purpose crlsign -check_ss_sig \
        -CApath /dev/null -CAfile "${cvedir}"/ca.pem "${cvedir}"/ca.pem \
        >  "${cvedir}"/certs.vfy 2>&1
    openssl verify -x509_strict -policy_check -purpose smimesign \
        -CApath /dev/null -CAfile "${cvedir}"/ca.pem "${cvedir}"/verify.pem \
        >> "${cvedir}"/certs.vfy 2>&1

    if ! cmp -s -- "${cvedir}"/certs.vfy - <<EOF
${cvedir}/ca.pem: OK
${cvedir}/verify.pem: OK
EOF
    then
        error "certificates chain verification failed"
    fi

    rm -- "${cvedir}"/certs.vfy


    openssl x509 -in "${cvedir}"/ca.pem -outform der -out /dev/null
    fingerprint=`openssl x509 -in "${cvedir}"/ca.pem -outform der | sha1sum | head -c 40`
    [ ${#fingerprint} = 40 ]
    username=`${base32} "${fingerprint}"`

    if ! cmp -s -- "${cvedir}"/username - <<EOF
${username}
EOF
    then
        error "username verification failed"
    fi
}


# Public certificates and private keys
# ${certdir}/ca.pem      : X.509 self-signed root CA certificate
# ${certdir}/verify.pem  : X.509 signature verification certificate (issued by root CA)
# ${keysdir}/sign.pem    : private signature key
certdir="${ssldir}"/certs
keysdir="${ssldir}"/private


# Input and output files are in ${msgdir}
#
# <peer>
#
#     out: derive.pem, rpeer.sig[atomic]
#
# <--- rpeer.sig
#
# <send>
#     in:  message, username, {ca,verify}.pem, rpeer.sig
#     out: speer.sig[atomic], message.enc[atomic], {send,recv,ack}.mac
#
# ---> speer.sig, message.enc, send.mac
#
# <recv>
#     in:  message.enc, username, send.mac, {ca,verify,derive}.pem, speer.sig
#     out: message, {recv,ack}.mac
#
# <--- recv.mac
#
# <ack>
#
# ---> ack.mac
case ${cmd} in
peer)
    rm -f -- "${msgdir}"/derive.pem "${msgdir}"/rpeer.der "${msgdir}"/rpeer.sig \
             "${msgdir}"/rpeer.sig.tmp

    # generate ephemeral peer key
    openssl genpkey -paramfile "${modp18}" \
                    -out "${msgdir}"/derive.pem

    # extract and sign ephemeral public peer key
    openssl pkey -pubout -outform der        \
                 -in  "${msgdir}"/derive.pem \
                 -out "${msgdir}"/rpeer.der

    openssl cms -sign -noattr -binary -md ${sigalg} -nodetach -nocerts -outform pem \
                -signer   "${certdir}"/verify.pem \
                -inkey    "${keysdir}"/sign.pem   \
                -in       "${msgdir}"/rpeer.der   \
                -out      "${msgdir}"/rpeer.sig.tmp
    mv -- "${msgdir}"/rpeer.sig.tmp "${msgdir}"/rpeer.sig

    rm -- "${msgdir}"/rpeer.der
    ;;


send)
    rm -f -- "${msgdir}"/derive.pem "${msgdir}"/speer.der  "${msgdir}"/rpeer.der   \
             "${msgdir}"/speer.sig  "${msgdir}"/shared.key "${msgdir}"/message.enc \
             "${msgdir}"/send.mac   "${msgdir}"/recv.mac   "${msgdir}"/ack.mac     \
             "${msgdir}"/speer.sig.tmp "${msgdir}"/message.enc.tmp

    # verify certificates chain
    verify_certs "${msgdir}"

    # verify and extract signed recipient's ephemeral public peer key
    openssl cms -verify \
                -x509_strict -policy_check -purpose smimesign -check_ss_sig -inform pem \
                -CAfile   "${msgdir}"/ca.pem -CApath /dev/null \
                -certfile "${msgdir}"/verify.pem               \
                -in       "${msgdir}"/rpeer.sig                \
                -out      "${msgdir}"/rpeer.der

    # generate ephemeral peer key
    openssl genpkey -paramfile "${modp18}" \
                    -out "${msgdir}"/derive.pem

    # derive (large) shared secret
    openssl pkeyutl -derive -peerform der           \
                    -inkey   "${msgdir}"/derive.pem \
                    -peerkey "${msgdir}"/rpeer.der  \
                    -out     "${msgdir}"/shared.key

    # extract and sign ephemeral public peer key
    openssl pkey -pubout -outform der        \
                 -in  "${msgdir}"/derive.pem \
                 -out "${msgdir}"/speer.der

    openssl cms -sign -noattr -binary -md ${sigalg} -nodetach -nocerts -outform pem \
                -signer   "${certdir}"/verify.pem \
                -inkey    "${keysdir}"/sign.pem   \
                -in       "${msgdir}"/speer.der   \
                -out      "${msgdir}"/speer.sig.tmp
    mv -- "${msgdir}"/speer.sig.tmp "${msgdir}"/speer.sig


    # deterministically derive encryption and MAC keys from shared secret
    enckey=`openssl dgst -mac hmac -${enchash} -macopt key:encrypt "${msgdir}"/shared.key | cut -d' ' -f2`
    sendkey=`openssl dgst -mac hmac -${sigalg} -macopt key:send    "${msgdir}"/shared.key | cut -d' ' -f2`
    recvkey=`openssl dgst -mac hmac -${sigalg} -macopt key:recv    "${msgdir}"/shared.key | cut -d' ' -f2`
    [ ${#enckey} = 64  -a  ${#sendkey} = 128  -a  ${#recvkey} = 128 ]

    # compute message send/recv/ack MACs using derived MAC keys
    openssl dgst -mac hmac -${sigalg}      \
                 -macopt hexkey:${sendkey} \
                 -out "${msgdir}"/send.mac \
                      "${msgdir}"/message

    openssl dgst -mac hmac -${sigalg}      \
                 -macopt hexkey:${recvkey} \
                 -out "${msgdir}"/recv.mac \
                      "${msgdir}"/message

    openssl dgst -mac hmac -${sigalg} -macopt key:ack \
                 -out "${msgdir}"/ack.mac             \
                      "${msgdir}"/shared.key

    sed -i 's/^.* //' -- "${msgdir}"/send.mac "${msgdir}"/recv.mac "${msgdir}"/ack.mac

    # encrypt message using encryption key
    openssl cms -EncryptedData_encrypt -binary -${encalg} -outform pem \
                -secretkey ${enckey}               \
                -in        "${msgdir}"/message     \
                -out       "${msgdir}"/message.enc.tmp
    mv -- "${msgdir}"/message.enc.tmp "${msgdir}"/message.enc

    rm -- "${msgdir}"/derive.pem "${msgdir}"/speer.der "${msgdir}"/rpeer.der \
          "${msgdir}"/shared.key

    ;;


recv)
    rm -f -- "${msgdir}"/speer.der "${msgdir}"/shared.key "${msgdir}"/message \
             "${msgdir}"/send.cmp  "${msgdir}"/recv.mac   "${msgdir}"/ack.mac

    # verify certificates chain
    verify_certs "${msgdir}"

    # verify and extract signed sender's ephemeral public peer key
    openssl cms -verify \
                -x509_strict -policy_check -purpose smimesign -check_ss_sig -inform pem \
                -CAfile   "${msgdir}"/ca.pem -CApath /dev/null \
                -certfile "${msgdir}"/verify.pem               \
                -in       "${msgdir}"/speer.sig                \
                -out      "${msgdir}"/speer.der

    # derive (large) shared secret
    openssl pkeyutl -derive -peerform der           \
                    -inkey   "${msgdir}"/derive.pem \
                    -peerkey "${msgdir}"/speer.der  \
                    -out     "${msgdir}"/shared.key

    # deterministically derive encryption and MAC keys from shared secret
    enckey=`openssl dgst -mac hmac -${enchash} -macopt key:encrypt "${msgdir}"/shared.key | cut -d' ' -f2`
    sendkey=`openssl dgst -mac hmac -${sigalg} -macopt key:send    "${msgdir}"/shared.key | cut -d' ' -f2`
    recvkey=`openssl dgst -mac hmac -${sigalg} -macopt key:recv    "${msgdir}"/shared.key | cut -d' ' -f2`
    [ ${#enckey} = 64  -a  ${#sendkey} = 128  -a  ${#recvkey} = 128 ]

    # decrypt message using encryption key
    openssl cms -EncryptedData_decrypt -inform pem  \
                -secretkey ${enckey}                \
                -in        "${msgdir}"/message.enc  \
                -out       "${msgdir}"/message

    # compute message send/recv/ack MACs using derived MAC keys
    openssl dgst -mac hmac -${sigalg}      \
                 -macopt hexkey:${sendkey} \
                 -out "${msgdir}"/send.cmp \
                      "${msgdir}"/message

    openssl dgst -mac hmac -${sigalg}      \
                 -macopt hexkey:${recvkey} \
                 -out "${msgdir}"/recv.mac \
                      "${msgdir}"/message

    openssl dgst -mac hmac -${sigalg} -macopt key:ack \
                 -out "${msgdir}"/ack.mac             \
                      "${msgdir}"/shared.key

    sed -i 's/^.* //' -- "${msgdir}"/send.cmp "${msgdir}"/recv.mac "${msgdir}"/ack.mac

    # verify message MAC
    if ! cmp -s -- "${msgdir}"/send.mac "${msgdir}"/send.cmp; then
        error "MAC verification failed"
    fi

    rm -- "${msgdir}"/speer.der "${msgdir}"/shared.key "${msgdir}"/send.cmp

    ;;


*)
    error "unknown command"
    ;;
esac
