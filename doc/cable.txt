Message exchange with PFS and repudiability
===========================================

Authentication and encryption
-----------------------------

Permanent keys:
  + public X.509   [ca.pem] (root CA) + username (hash of [ca.pem])
  + public X.509   [verify.pem]                  (issued by root CA)
  + private key    [sign.pem]                    (corresponding to X.509 [verify.pem])

Ephemeral keys:
  + public DH key  [speer.sig or rpeer.sig]      (signed, verifiable with [verify.pem])
  + private DH key [derive.pem]                  (corresponding to DH [s/rpeer.pem])
  + shared         [shared.key]

Key derivation:
  + sender's    ephemeral DH key [speer.der] or private [derive.pem]
  + recipient's ephemeral DH key [rpeer.der] or private [derive.pem]
  + MAC_{send,recv,ack} keys are different hash functions derived from [shared.key]
    (ephemeral-ephemeral key agreement: http://tools.ietf.org/html/rfc2785)

<send> (sender)
  + [message]                                                    <- <input>
  + [peer request]                                               -> <send>

<peer> (recipient)
  + [rpeer.der]     -> signed    with recipient's [sign.pem]     -> [rpeer.sig]
  + [rpeer.sig]                                                  -> <send>

<send> (contd., sender)
  + [rpeer.sig]                                                  <- <receive>
  + [rpeer.sig]     -> verified  with recipient's [verify.pem]   -> [rpeer.der]
  + [derive.pem]  + [rpeer.der] -> DH key derivation             -> [shared.key]
  + [speer.der]     -> signed    with sender's    [sign.pem]     -> [speer.sig]
  + [message]       -> encrypted with shared      [shared.key]   -> [message.enc]
  + [message.enc] + [speer.sig] + MAC_send(message)              -> <send>

<recv> (recipient)
  + [message.enc] + [speer.sig] + MAC_send(message)               <- <receive>
  + [speer.sig]     -> verified  with sender's    [verify.pem]   -> [speer.der]
  + [derive.pem]  + [speer.der] -> DH key derivation             -> [shared.key]
  + [message.enc]   -> decrypted with shared      [shared.key]   -> [message]
  + [message]       -> verified  with shared      MAC_send
  + MAC_recv([message])                                          -> <send>

<ack> (sender)
  + MAC_recv([message])                                          <- <receive>
  + [message]       -> verified  with shared      MAC_recv
  + MAC_ack                                                      -> <send>

<fin> (recipient)
  + MAC_ack                                                      <- <receive>
  + MAC_ack         -> compared  with shared      MAC_ack


Protocol
--------
  + username is explicitly verified against public key fingerprint
  + hostname is implicitly verified when fetching files
  + perfect forward secrecy and repudiability
  + resistant against MITM injections (except first MSG substitution with same <msgid>)
  + resistant against temporary MITM resources substitution
  + resistant to request replay attacks intended to cause large number of disk writes

  + resistant against fingerprinting if username is unknown
  + vulnerable to DoS (e.g., many MSG requests) if username is known

  + each loop type is mutually exclusive for a given (r)queue/<msgid>
  + all code blocks are restartable (e.g., after crash)
  + messages and confirmations are never lost if /cables filesystem is transactional

  + /cables/                                       private directory
                  /queue/<msgid>/                  outgoing message <msgid> work dir
                  /rqueue/<msgid>/                 incoming message <msgid> work dir

  + [send]        (MUA-invoked script)          writes to /cables/queue
  + [service]     (fast and secure web service) writes to /cables/(r)queue
  + [crypto loop] writes to /cables/(r)queue, MUA inbox directory;
                  reads from certs (public, private) directories
  + [fetch  loop] writes to /cables/(r)queue, network
  + [comm   loop] writes to network;
                  reads username from certs directory
  + [webserver]   writes to network;
                  reads from certs public directory, /cables/(r)queue


[webserver]
  + /<username>                                    common URL prefix
  +   /certs/{ca,verify}.pem                       serve  public certificates
  +   /queue/<msgid>                               serve  /cables/queue/<msgid>/message.enc
  +   /queue/<msgid>.key                           serve  /cables/queue/<msgid>/speer.sig
  +   /rqueue/<msgid>.key                          serve  /cables/rqueue/<msgid>/rpeer.sig
  +   /request/...                                 invoke service[...] and serve answer


<send> (sender)
  [send]
  + generate random 160-bit (40 hex digits) <msgid>
  + prepare /cables/queue/<msgid>/{message{,.hdr},{,s}{user,host}name}
  + create  /cables/queue/<msgid>/send.req
  * (atomic via rename from /cables/queue/tmp.<random>/<msgid>/)

  [fetch loop]
  + check   /cables/queue/<msgid>/send.req
  + request <hostname>/<username>/request/msg/<msgid>/<shostname>/<susername>
  + fetch   <hostname>/<username>/rqueue/<msgid>.key    -> /cables/queue/<msgid>/rpeer.sig
  + fetch   <hostname>/<username>/certs/{ca,verify}.pem -> /cables/queue/<msgid>/
  + rename  /cables/queue/<msgid>/send.req         -> send.rdy

  [crypto loop]
  + check   /cables/queue/<msgid>/send.rdy
  + prepare /cables/queue/<msgid>/{speer.sig[atomic],message.enc[atomic],{send,recv,ack}.mac}
  + rename  /cables/queue/<msgid>/send.rdy         -> send.ok  (success)
  +                                                -> send.req (crypto fail)
  + remove  /cables/queue/<msgid>/{message,{ca,verify}.pem,rpeer.sig}  (if success)

  [comm loop]
  + check   /cables/queue/<msgid>/send.ok
  + checkno /cables/queue/<msgid>/ack.ok
  + read    /cables/queue/<msgid>/send.mac         (128 hex digits)
  + request <hostname>/<username>/request/snd/<msgid>/<sendmac>


<peer> (recipient)
  [service]
  + upon    msg/<msgid>/<hostname>/<username>
  + checkno /cables/rqueue/<msgid>                 (ok and skip if exists)
  + create  /cables/rqueue/<msgid>.new/            (ok if exists, skip if locked)
  + write   /cables/rqueue/<msgid>.new/{username,hostname}
  + create  /cables/rqueue/<msgid>.new/peer.req    (ok if exists)
  + rename  /cables/rqueue/<msgid>.new             -> <msgid>

  [crypto loop]
  + check   /cables/rqueue/<msgid>/peer.req
  + prepare /cables/rqueue/<msgid>/{derive.pem,rpeer.sig[atomic]}
  + rename  /cables/rqueue/<msgid>/peer.req        -> peer.ok (success)


<recv> (recipient)
  [service]
  + upon    snd/<msgid>/<sendmac>
  + check   /cables/rqueue/<msgid>/peer.ok
  + write   /cables/rqueue/<msgid>/send.mac        (skip if exists)
  + create  /cables/rqueue/<msgid>/recv.req        (atomic, ok if exists)
  + touch   /cables/rqueue/<msgid>/                (if recv.req did not exist)

  [fetch loop]
  + check   /cables/rqueue/<msgid>/recv.req
  + check   /cables/rqueue/<msgid>/send.mac
  + checkno /cables/rqueue/<msgid>/recv.{rdy,ok}   (in this order)
  + fetch   <hostname>/<username>/queue/<msgid>     -> /cables/rqueue/<msgid>/message.enc
  + fetch   <hostname>/<username>/queue/<msgid>.key -> /cables/rqueue/<msgid>/speer.sig
  + fetch   <hostname>/<username>/certs/{ca,verify}.pem -> /cables/rqueue/<msgid>/
  + rename  /cables/rqueue/<msgid>/recv.req         -> recv.rdy

  [crypto loop]
  + check   /cables/rqueue/<msgid>/recv.rdy
  + prepare /cables/rqueue/<msgid>/{message{,.hdr},{recv,ack}.mac}
  + verify  /cables/rqueue/<msgid>/send.mac        (remove if fail)
  + create  <mua message>                          <- /cables/rqueue/<msgid>/message
  + rename  /cables/rqueue/<msgid>/recv.rdy        -> recv.ok  (success)
  +                                                -> recv.req (crypto fail)
  + remove  /cables/rqueue/<msgid>/{message{,.enc},{ca,verify,derive}.pem,{r,s}peer.sig,send.mac}  (if success)

  [comm loop]
  + check   /cables/rqueue/<msgid>/recv.ok
  + read    /cables/rqueue/<msgid>/recv.mac        (128 hex digits)
  + request <hostname>/<username>/request/rcp/<msgid>/<recvmac>


<ack> (sender)
  [service]
  + upon    rcp/<msgid>/<recvmac>
  + check   /cables/queue/<msgid>/send.ok
  + compare /cables/queue/<msgid>/recv.mac        <-> <recvmac>
  + create  /cables/queue/<msgid>/ack.req          (atomic, ok if exists)
  + touch   /cables/queue/<msgid>/                 (if ack.req did not exist)

  [crypto loop]
  + check   /cables/queue/<msgid>/ack.req
  + checkno /cables/queue/<msgid>/ack.ok
  + create  <mua acknowledge>
  + rename  /cables/queue/<msgid>/ack.req          -> ack.ok
  + remove  /cables/queue/<msgid>/{message.enc,speer.sig,{send,recv}.mac}  (if success)

  [comm loop]
  + check   /cables/queue/<msgid>/ack.ok
  + read    /cables/queue/<msgid>/ack.mac          (128 hex digits)
  + request <hostname>/<username>/request/ack/<msgid>/<ackmac>  (wait for good response)
  + rename  /cables/queue/<msgid>                  -> <msgid>.del
  (if ack is not handled or lost due to MITM attack, recipient will keep requesting rcp/<msgid>/<recvmac>)

  -and/or-

  + check   /cables/queue/<msgid>.del/
  + remove  /cables/queue/<msgid>.del/


<fin> (recipient)
  [service]
  + upon    ack/<msgid>/<ackmac>
  + check   /cables/rqueue/<msgid>/recv.ok
  + compare /cables/rqueue/<msgid>/ack.mac        <-> <ackmac>
  + rename  /cables/rqueue/<msgid>                 -> <msgid>.del

  [comm loop]
  + check   /cables/rqueue/<msgid>.del/
  + remove  /cables/rqueue/<msgid>.del/


Loop scheduler
--------------

Initialization (for <msgid>s of 40 hex digits):
  + remove /cables/rqueue/<msgid>.new/                (before [service] startup)

Watch list (for <msgid>s of 40 hex digits):
  + /cables/queue/  <msgid>, <msgid>.del              (inotify: moved_to, attrib)
  + /cables/rqueue/ <msgid>, <msgid>.del              (inotify: moved_to, attrib)

  + <msgid>{,.new}: non-blocking lock attempt
  + <msgid>.del:    blocking lock (to let renaming action complete, with timeout)

Retry policies:
  + retry every X min. (+ random component)

Validation: upon reaching max age (from <msgid>/username timestamp):
  (mutually exclusive with all loop types)

  + (queue)  create  <mua message>
                 [if]   ack.ok:       failed to acknowledge receipt
                 [elif] send.ok:      failed to send message and receive receipt
                 [else]               failed to peer and encrypt message
  + (queue)  rename  /cables/queue/<msgid>  -> <msgid>.del

  + (rqueue) create  <mua message>
                 [if]   recv.ok:      failed to send receipt and receive acknowledgment
                 [elif] recv.req/rdy: failed to fetch and decrypt message
                 [else]               failed to generate peer key
  + (rqueue) rename  /cables/rqueue/<msgid> -> <msgid>.del


Message format
--------------

(send)
  + extract all unique To:, Cc:, Bcc: addresses
  + check that all addresses (+ From:) are recognized (e.g., *.onion)
  + remove Bcc: and all X-*: headers
  + reformat Date: as UTC
  + compress with gzip


(recv)
  + uncompress with classic (single-threaded) gzip
  + replace From: header with the verified address (rename old header)
  + add X-Received-Date: header


(ack)
  + extract original From:, To:, Cc:, Bcc:, Subject:, Date:, Message-ID:,
                     In-Reply-To:, References: fields
  + replace Date: header with current date (rename old header)
  + prepend [vfy] to Subject: field contents
  + append body with verification message, including current timestamp
    and verified delivery address
